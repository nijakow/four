--- /secure/stdlib.c

use $the_object;

object the_object(string id)
{
    return $the_object(id);
}


--- /secure/object.c

inherit "/secure/stdlib.c";


/*
 * This is the basic object
 */

use $clone_instance;

void create()
{
}

any clone(...)
{
	any instance;
	
	instance = $clone_instance(this);
	instance->create(...);
	return instance;
}

--- /secure/master.c

inherit "/secure/stdlib.c";

use $log;
use $on_connect;

void receive(any connection)
{
	any conn_inst;
	$log("New connection!\n");
	conn_inst = "/secure/connection.c"->clone(connection);
	"/secure/program.c"->clone(conn_inst, the_object("/prg/chat/chatroom.c"));
}

void create()
{
    "/prg/chat/chatroom.c"->create();
	$on_connect(this::receive);
}

--- /secure/connection.c

inherit "/secure/object.c";

use $log;
use $write;
use $on_receive;
use $on_disconnect;

any port;
any func;

void prompt(any the_func, ...)
{
    func = the_func;
    write(...);
}

void write(...)
{
    while (va_count) {
        $write(port, va_next);
    }
}

void receive(any text)
{
    any _func;
    
    if (func) {
    	_func = func;
    	func = nil;
        _func(text);
    }
}

void handle_disconnect()
{
	$log("Disconnect!\n");
}

void create(any the_port)
{
	"/secure/object.c"::create();
	port = the_port;
	func = nil;
	$on_receive(port, this::receive);
	$on_disconnect(port, this::handle_disconnect);
}

--- /std/thing.c

inherit "/secure/object.c";

string short;
string long;

string get_short() { return short; }
string get_long()  { return long;  }

void set_short(string s) { short = s; }
void set_long(string l)  { long  = l; }

void create()
{
    "/secure/object.c"::create();
    set_short("<error>");
    set_long("<error>");
}

--- /prg/chat/chatroom.c

inherit "/secure/object.c";

use $listinsert;
use $listlen;
use $listremove;

any subscribers;

void add_subscriber(any client)
{
    $listinsert(subscribers, $listlen(subscribers), client);
}

void remove_subscriber(any client)
{
    int x;
    
    for (x = 0; x < $listlen(subscribers); this) {
        if (subscribers[x] == client) {
            $listremove(subscribers, x);
        } else {
            x = x + 1;
        }
    }
}

void broadcast(string message)
{
    int x;
    
    for (x = 0; x < $listlen(subscribers); this) {
        subscribers[x]->write(message);
        x = x + 1;
    }
}

void create()
{
    "/secure/object.c"::create();
    subscribers = {};
}

--- /secure/program.c

inherit "/secure/object.c";

use $log;

any connection;
any chatroom;

void write(...) { connection->write(...); }

void msg(string text)
{
	chatroom->broadcast(text);
	connection->prompt(this::msg, "> ");
}

void create(any the_connection, any the_chatroom)
{
    connection = the_connection;
    chatroom = the_chatroom;
    the_chatroom->add_subscriber(this);
    connection->prompt(this::msg, "> ");
}
