--- /secure/stdlib.c

use $log;
use $the_object;
use $listinsert;
use $listremove;
use $listlen;
use $strlen;
use $substr;


object the_object(string id)
{
    return $the_object(id);
}

void log(...)
{
    $log(...);
}

int length(any lst)
{
    return $listlen(lst);
}

void insert(any lst, int index, any value)
{
    $listinsert(lst, index, value);
}

any remove(any lst, int index)
{
    return $listremove(lst, index);
}

int strlen(string str)
{
    return $strlen(str);
}

string substr(string str, int i0, int i1)
{
    return $substr(str, i0, i1);
}

bool isspace(char c)
{
    return (c == ' ') || (c == '\t') || (c == '\n') || (c == '\r');
}

string trim(string s)
{
    int start;
    int end;
    
    start = 0;
    end = strlen(s) - 1;
    while ((start < end) && isspace(s[start]))
        start = start + 1;
    while ((start < end) && isspace(s[end]))
        end = end - 1;
    return substr(s, start, end + 1);
}


--- /secure/object.c

inherit "/secure/stdlib.c";


/*
 * This is the basic object
 */

use $clone_instance;

void create()
{
}

any clone(...)
{
	any instance;
	
	instance = $clone_instance(this);
	instance->create(...);
	return instance;
}

--- /secure/master.c

inherit "/secure/stdlib.c";

use $on_connect;

void receive(any connection)
{
	any conn_inst;
	log("New connection!\n");
	conn_inst = "/secure/connection.c"->clone(connection);
	"/secure/program.c"->clone(conn_inst, the_object("/prg/chat/chatroom.c"));
}

void create()
{
    "/prg/chat/chatroom.c"->create();
	$on_connect(this::receive);
}

--- /secure/connection.c

inherit "/secure/object.c";

use $write;
use $on_receive;
use $on_disconnect;

any port;
any func;

void prompt(any the_func, ...)
{
    func = the_func;
    write(...);
}

void write(...)
{
    while (va_count) {
        $write(port, va_next);
    }
}

void receive(any text)
{
    any _func;
    
    if (func) {
    	_func = func;
    	func = nil;
        _func(trim(text));
    }
}

void handle_disconnect()
{
	log("Disconnect!\n");
}

void create(any the_port)
{
	"/secure/object.c"::create();
	port = the_port;
	func = nil;
	$on_receive(port, this::receive);
	$on_disconnect(port, this::handle_disconnect);
}

--- /std/thing.c

inherit "/secure/object.c";

string short;
string long;

string get_short() { return short; }
string get_long()  { return long;  }

void set_short(string s) { short = s; }
void set_long(string l)  { long  = l; }

void create()
{
    "/secure/object.c"::create();
    set_short("<error>");
    set_long("<error>");
}

--- /prg/chat/chatroom.c

inherit "/secure/object.c";

any subscribers;

void add_subscriber(any client)
{
    insert(subscribers, length(subscribers), client);
}

void remove_subscriber(any client)
{
    int x;
    
    for (x = 0; x < length(subscribers);) {
        if (subscribers[x] == client) {
            remove(subscribers, x);
        } else {
            x = x + 1;
        }
    }
}

void broadcast(...)
{
    int x;
    
    for (x = 0; x < length(subscribers);) {
        subscribers[x]->write(...);
        x = x + 1;
    }
}

void create()
{
    "/secure/object.c"::create();
    subscribers = {};
}

--- /secure/program.c

inherit "/secure/object.c";

object connection;
object chatroom;

string name;

void write(...) { connection->write(...); }

void banner()
{
    write("\n");
    write("                /####/  #################\n");
    write("              /####/    #####/     ######\n");
    write("            /####/      ###/       ######\n");
    write("          /####/        #/         /####/\n");
    write("        /####/          /        /####/\n");
    write("      /####/                   /####/\n");
    write("    /####/                   /####/\n");
    write("  /####/                   /####/\n");
    write("/####/                   /####/         /\n");
    write("#####################   ######         /#\n");
    write("#####################   ######       /###\n");
    write("#####################   ######     /#####\n");
    write("               ######   #################\n");
    write("               ######\n");
    write("               ######\n");
    write("               ######   #\n");
    write("   _                    #  #  #  #==  #  #    #==\\   #==,  *==*  #\\\\  #  #\\\\  #\n");
    write("  |c| nijakow, mhahnFr  #  #==#  #=   #  #    #==<   #=*   #  #  # \\\\ #  # \\\\ #\n");
    write("  '-'                   #  #  #  #==  #  #==  #==/   # \\\\  *==*  #  \\\\#  #  \\\\#\n");
    write("                        #\n");
    write("\n");
}

void msg(string text)
{
    int i;
    
	chatroom->broadcast("[", name, "]: ", text, "\n");
	connection->prompt(this::msg, "> ");
}

void setname(string _name)
{
    name = _name;
    connection->prompt(this::msg, "> ");
}

void create(any the_connection, any the_chatroom)
{
    connection = the_connection;
    chatroom = the_chatroom;
    the_chatroom->add_subscriber(this);
    banner();
    connection->prompt(this::setname, "What's your name? ");
}
